paste("N")
paste(replicate(100,"N"))
paste(replicate(100,"N"),collapse = "")
fasta2 <- readDNAStringSet("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta", format="fasta")
compfasta2 <- complement(fasta2)
writeXStringSet(compfasta2, "/home/oskar/out2.fasta")
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
BiocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
BiocLite("BiocUpgrade")
install.packages("BiocLite")
biocLite("gage")
fundA<-as.matrix(runif(5,1,50))
matA<-matrix(0, nrow = 101, ncol = 5)
matB<-matrix(0, nrow = 101, ncol = 5)
perc <- matrix(0, nrow = 100, ncol = 5)
matA[1,1:5] <- fundA
matB[1,1:5] <- matA[1,1:5]
matB[1,3] <- matB[1,3]*0.95
for (y in 1:100)
{
for (i in 1:5) {
n <- y+1
matA[n,i]<-as.numeric(matA[y,i])*runif(1,0.9,1.10)
}
}
for (y in 1:100) {
for (i in 1:5){
n <- y+1
perc[y,i] <- matA[n,i]/matA[y,i]
}
}
for (y in 1:100){
for (i in 1:5){
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
}
}
categories <- c("Entertainment", "Games", "Health", "Personal Finance",
"Shopping", "Music", "USSites", "Porn", "Computers", "Cars")
colors <- c("green", "blue", "cyan", "yellow", "magenta", "orange",
"red", "black", "purple", "pink")
markers <- 1:5
matplot(1:101, matA, type = "l", lty = 1)
matplot(1:101, matB, type = "l", lty = 1)
perc
sum(perc[y,i])
perc[y,i]
perc[y,]
sum(perc[y,])
sum(perc[y,])/5
matAtot <- matrix(0, nrow=101, ncol=1)
for (y in 1:100) {
for (i in 1:5){
n <- y+1
matAtot[y] <- sum(perc[y,])/5
}
}
matAtot
matAtot <- matrix(0, nrow=100, ncol=1)
for (y in 1:100) {
for (i in 1:5){
n <- y+1
matAtot[y] <- sum(perc[y,])/5
}
}
matAtot
for (y in 1:100) {
matAtot[y] <- sum(perc[y,])/5
}
matAtot
sum(matA[y,])
matA
matA[y,]
matA[,i]
perc[y,]
perc[,y]
perc[,1]
matA[y,]
sum(matA[y,]
sum(matA[y,])
sum(matA[y,])
as.numeric(sum(matA[y,]))*0.05
matB<-matrix(0, nrow = 101, ncol = 6)
matB[1,3] <- matB[1,3]*0.95
for (y in 1:100){
for (i in 1:5){
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[y,]))*0.05
}
}
matB
matplot(1:101, matB, type = "l", lty = 1)
matB[1,1:5] <- matA[1,1:5]
matB[1,3] <- matB[1,3]*0.95
for (y in 1:100){
for (i in 1:5){
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[y,]))*0.05
}
}
matplot(1:101, matB, type = "l", lty = 1)
matB
for (y in 1:100){
for (i in 1:5){
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[y,6]<-as.numeric(sum(matA[y,]))*0.05
}
}
matplot(1:101, matB, type = "l", lty = 1)
matB
fundA<-as.matrix(runif(5,1,50))
matA<-matrix(0, nrow = 101, ncol = 5)
matAtot <- matrix(0, nrow=100, ncol=1)
matB<-matrix(0, nrow = 101, ncol = 6)
perc <- matrix(0, nrow = 100, ncol = 5)
matA[1,1:5] <- fundA
matB[1,1:5] <- matA[1,1:5]
matB[1,3] <- matB[1,3]*0.95
for (y in 1:100)
{
for (i in 1:5) {
n <- y+1
matA[n,i]<-as.numeric(matA[y,i])*runif(1,0.9,1.10)
}
}
for (y in 1:100) {
for (i in 1:5){
n <- y+1
perc[y,i] <- matA[n,i]/matA[y,i]
}
}
matB
matB[1,3]
matA[y,]
matA[1,]
matB[1,6]<-as.numeric(sum(matA[1,]))*0.05
matB[1,6]
as.numeric(sum(matA[1,]))
as.numeric(sum(matA[1,]))*0.05
for (y in 1:100)
{
for (i in 1:5) {
n <- y+1
matA[n,i]<-as.numeric(matA[y,i])*runif(1,0.9,1.10)
}
}
for (y in 1:100) {
for (i in 1:5){
n <- y+1
perc[y,i] <- matA[n,i]/matA[y,i]
}
}
for (y in 1:100){
for (i in 1:5){
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[y,]))*0.05
}
}
matplot(1:101, matB, type = "l", lty = 1)
matB
matA[y,]
sum(matA[y,])
fundA<-as.matrix(runif(5,1,50))
matA<-matrix(0, nrow = 101, ncol = 5)
matAtot <- matrix(0, nrow=100, ncol=1)
matB<-matrix(0, nrow = 101, ncol = 6)
perc <- matrix(0, nrow = 100, ncol = 5)
matA[1,1:5] <- fundA
matB[1,1:5] <- matA[1,1:5]
matB[1,3] <- matB[1,3]*0.95
matB[1,6]<-as.numeric(sum(matA[1,]))*0.05
for (y in 1:100)
{
for (i in 1:5) {
n <- y+1
matA[n,i]<-as.numeric(matA[y,i])*runif(1,0.9,1.10)
}
}
for (y in 1:100) {
for (i in 1:5){
n <- y+1
perc[y,i] <- matA[n,i]/matA[y,i]
}
}
for (y in 1:100){
for (i in 1:5){
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[y,]))*0.05
}
}
matplot(1:101, matB, type = "l", lty = 1)
matB
for (y in 1:100){
for (i in 1:5){
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[y,]))*0.5
}
}
matplot(1:101, matB, type = "l", lty = 1)
matB
matBtot <- matrix(0, nrow=101, ncol=1)
for (y in 1:101){
matBtot[y]<-as.numeric(sum(matB[y,]))
}
matBtot
matB
matB[1,6]<-as.numeric(sum(matA[1,]))*0.5
matB
as.numeric(sum(matA[1,]))*0.5
for (y in 1:100){
for (i in 1:5){
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[n,]))*0.5
}
}
matB
matplot(1:101, matB, type = "l", lty = 1)
for (y in 1:101){
matBtot[y]<-as.numeric(sum(matB[y,]))
}
matBtot
for (y in 1:100) {
matAtot[y] <- sum(perc[y,])/5
}
matAtot
fundA<-as.matrix(runif(5,1,50))
matA<-matrix(0, nrow = 101, ncol = 6)
matAtot <- matrix(0, nrow=100, ncol=1)
matB<-matrix(0, nrow = 101, ncol = 6)
matBtot <- matrix(0, nrow=101, ncol=1)
perc <- matrix(0, nrow = 100, ncol = 5)
matA[1,1:5] <- fundA
matB[1,1:5] <- matA[1,1:5]
matB[1,3] <- matB[1,3]*0.95
matB[1,6]<-as.numeric(sum(matA[1,]))*0.5
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
matA[n,i]<-as.numeric(matA[y,i])*runif(1,0.9,1.10)
}
}
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
perc[y,i] <- matA[n,i]/matA[y,i]
}
}
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[n,]))*0.5
}
}
for (y in 1:100) {
n <- y+1
matA[n,6]<-as.numeric(sum(matB[n,]))*0.5
}
matplot(1:101, matB, type = "l", lty = 1)
matplot(1:101, matA, type = "l", lty = 1)
matA
matA[1,6]<-as.numeric(sum(matB[1,]))*0.5
for (y in 1:100) {
n <- y+1
matA[n,6]<-as.numeric(sum(matB[n,]))*0.5
}
matplot(1:101, matA, type = "l", lty = 1)
matA
fundA<-as.matrix(runif(5,1,50))
matA<-matrix(0, nrow = 101, ncol = 6)
matAtot <- matrix(0, nrow=100, ncol=1)
matB<-matrix(0, nrow = 101, ncol = 6)
matBtot <- matrix(0, nrow=101, ncol=1)
perc <- matrix(0, nrow = 100, ncol = 5)
matA[1,1:5] <- fundA
matB[1,1:5] <- matA[1,1:5]
matB[1,3] <- matB[1,3]*0.95
matB[1,6]<-as.numeric(sum(matA[1,]))*0.5
matA[1,6]<-as.numeric(sum(matB[1,]))*0.5
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
matA[n,i]<-as.numeric(matA[y,i])*runif(1,0.9,1.10)
}
}
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
perc[y,i] <- matA[n,i]/matA[y,i]
}
}
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[n,]))*0.5
}
}
for (y in 1:100) {
n <- y+1
matA[n,6]<-as.numeric(sum(matB[n,]))*0.5
}
#for (y in 1:101) {
#  matBtot[y]<-as.numeric(sum(matB[y,]))
#}
#for (y in 1:100) {
#  for (i in 1:5){
#    n <- y+1
#    perc[y,i] <- matA[n,i]/matA[y,i]
#  }
#}
#for (y in 1:100) {
#    matAtot[y] <- sum(perc[y,])/5
#}
categories <- c("Entertainment", "Games", "Health", "Personal Finance",
"Shopping", "Music", "USSites", "Porn", "Computers", "Cars")
colors <- c("green", "blue", "cyan", "yellow", "magenta", "orange",
"red", "black", "purple", "pink")
markers <- 1:6
matplot(1:101, matA, type = "l", lty = 1)
matplot(1:101, matB, type = "l", lty = 1)
#legend("topright", col=colors, categories, bg="white", pch=markers)
matA
matB
matplot(1:101, matA, type = "l", lty = 1)
matplot(1:101, matB, type = "l", lty = 1)
fundA<-as.matrix(runif(5,1,50))
matA<-matrix(0, nrow = 101, ncol = 6)
matAtot <- matrix(0, nrow=100, ncol=1)
matB<-matrix(0, nrow = 101, ncol = 6)
matBtot <- matrix(0, nrow=101, ncol=1)
perc <- matrix(0, nrow = 100, ncol = 5)
matA[1,1:5] <- fundA
matB[1,1:5] <- matA[1,1:5]
matB[1,3] <- matB[1,3]*0.95
matB[1,6]<-as.numeric(sum(matA[1,]))*0.5
matA[1,6]<-as.numeric(sum(matB[1,]))*0.5
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
matA[n,i]<-as.numeric(matA[y,i])*runif(1,0.9,1.10)
}
}
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
perc[y,i] <- matA[n,i]/matA[y,i]
}
}
for (y in 1:100) {
for (i in 1:5) {
n <- y+1
matB[n,i] <- matB[y,i]*perc[y,i]
matB[n,6]<-as.numeric(sum(matA[n,]))*0.5
}
}
for (y in 1:100) {
n <- y+1
matA[n,6]<-as.numeric(sum(matB[n,]))*0.5
}
#for (y in 1:101) {
#  matBtot[y]<-as.numeric(sum(matB[y,]))
#}
#for (y in 1:100) {
#  for (i in 1:5){
#    n <- y+1
#    perc[y,i] <- matA[n,i]/matA[y,i]
#  }
#}
#for (y in 1:100) {
#    matAtot[y] <- sum(perc[y,])/5
#}
#categories <- c("Entertainment", "Games", "Health", "Personal Finance",
#                "Shopping", "Music", "USSites", "Porn", "Computers", "Cars")
colors <- c("green", "blue", "cyan", "yellow", "magenta", "orange",
"red", "black", "purple", "pink")
#markers <- 1:6
matplot(1:101, matA, type = "l", lty = 1)
matplot(1:101, matB, type = "l", lty = 1)
#legend("topright", col=colors, categories, bg="white", pch=markers)
library(Biostrings)
fasta <- readDNAStringSet("/home/oskar/Documents/input/ptools/unitig_2/unitig_2_circ_asof_may_2015.fasta", format="fasta")
fasta2 <- readDNAStringSet("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta", format="fasta")
compfasta <- complement(fasta)
compfasta2 <- complement(fasta2)
writeXStringSet(compfasta, "/home/oskar/out1.fasta")
writeXStringSet(compfasta2, "/home/oskar/out2.fasta")
read.table("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.tab")
read.table("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.tab", header=T)
read.table("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.tab", header=F)
read.table("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.tab", header=F, sep = "t")
read.table("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.tab", header=F, sep = "")
read.table("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.tab", header=T, sep = "")
read.table("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.tab", header=T, sep = "")
read.table("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.fasta", header=T, sep = "")
biocLite("Biostrings")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
readAAStringSet("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.fasta")
seq<-readAAStringSet("/home/oskar/Downloads/uniprot-yourlist%3AM201603309CSKOQOBG1.fasta")
seq[1]
seq[1,1]
seq[1][1]
seq[1][2]
seq[1][1][1]
seq$`tr|A9E1V9|A9E1V9_9FLAO Elongation factor Tu OS=Kordia algicida OT-1 GN=tuf PE=3 SV=1`
grep("GN=", seq)
grep('GN=', seq)
grep('GN=*', seq)
lst<-grep('GN=*', seq)
lst[1]
seq[lst[1]]
lst<-grep('GN=*', seq[1])
lst
grep('GN=*', seq[1])
lst<-grep('GN=*', seq)
install.packages("Biostrings")
source("https://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("Biostrings")
library(Biostrings)
install.packages("read.fasta")
biocLite("read.fasta")
read.fasta
biocLite("seqinr")
library(seqinr)
seq1<-read.fasta(file="/home/oskar/Documents/input/ptools/combined_contig_1_2.fasta")
seq2<-read.fasta(file="/home/oskar/Documents/input/ptools/ABIB01.1.fsa_nt")
pairwiseAlignment(seq1, seq2, substitutionMatrix = mat,
gapOpening = 5, gapExtension = 2)
pairwiseAlignment(seq1, seq2, substitutionMatrix = mat, gapOpening = 5, gapExtension = 2)
seq1<-read.fasta(file="/home/oskar/Documents/input/ptools/combined_contig_1_2.fasta",seqtype = "DNA")
seq2<-read.fasta(file="/home/oskar/Documents/input/ptools/ABIB01.1.fsa_nt", seqtype = "DNA")
pairwiseAlignment(seq1, seq2, substitutionMatrix = mat, gapOpening = 5, gapExtension = 2)
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = -3, baseOnly = TRUE)
pairwiseAlignment(seq1, seq2, substitutionMatrix = mat, gapOpening = 5, gapExtension = 2)
seq1<-DNAString(seq1)
seq1<-DNAString("seq1"")
seq1<-DNAString("seq1")
seq1<-DNAString("seq1")
seq1<-read.fasta(file="/home/oskar/Documents/input/ptools/combined_contig_1_2.fasta",seqtype = "DNA")
pairwiseAlignment(seq1, seq2, substitutionMatrix = mat, gapOpening = 5, gapExtension = 2)
library(VariantAnnotation)
source("https://bioconductor.org/biocLite.R")
biocLite("Biostrings")
seq1 <- system.file("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta")
dna1<-DNAString(seq1)
dna1<-DNAString(seq1)
library(Biostrings)
dna1<- DNAString(seq1)
reverseComplement(dna1)
dnarev<-reverseComplement(dna1)
dna1
seq1
seq1 <- fasta.index("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta")
seq1
readDNAStringSet("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta")
dna1<-readDNAStringSet("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta")
dna1
dnarev<-reverseComplement(dna1)
dnarev
readDNAStringSet("/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=TRUE) <- dna1
readDNAStringSet("/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=TRUE)
writeXStringSet(dna1,"/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=TRUE)
writeXStringSet(dnarev,"/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=TRUE)
library(Biostrings)
reverse(dna1)
dnarev
dnarev<-reverse(dna1)
writeXStringSet(dnarev,"/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=TRUE)
seq1
dna1
dna1<-readDNAStringSet("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta")
dnarev<-reverse(dna1)
dnarev
dnarev<-reverseComplement(dna1)
writeXStringSet(dnarev,"/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=FALSE)
dna1<-readDNAStringSet("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta")
dnarev<-reverseComplement(dna1)
writeXStringSet(dnarev,"/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=FALSE)
dnarev<-reverse(dna1)
dnarev
writeXStringSet(dnarev,"/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=FALSE)
source("https://bioconductor.org/biocLite.R")
#biocLite("BiocUpgrade")
biocLite("Biostrings")
#source("https://bioconductor.org/biocLite.R")
#biocLite("BiocUpgrade")
biocLite("Biostrings")
library(Biostrings)
dna1<-readDNAStringSet("/home/oskar/Documents/input/ptools/unitig_1/seq1_16536_16552_circcq_fixed.fasta")
dnarev<-reverseComplement(dna1)
writeXStringSet(dnarev,"/home/oskar/ksept-fasta/unitigrevcomp.fasta",append=FALSE)
writeXStringSet(dnarev,"/home/oskar/ksept-fasta/uniti1grevcomp.fasta",append=FALSE)
library(Biostrings)
setwd("~/kordia_sp_pathway_analysis/")
dna1<-readDNAStringSet("seq1_16536_16552_circcq_fixed.fasta")
writeXStringSet(dna1,"combined-unitig-1-2.fasta",append=FALSE)
writeXStringSet(dna2,"combined-unitig-1-2.fasta",append=TRUE)
dna2 <- readDNAStringSet("unitig_2_circ_asof_may_2015.fasta")
writeXStringSet(dna2,"combined-unitig-1-2.fasta",append=TRUE)
